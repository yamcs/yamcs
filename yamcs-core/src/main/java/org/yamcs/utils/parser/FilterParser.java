/* Generated By:JavaCC: Do not edit this line. FilterParser.java */
package org.yamcs.utils.parser;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.HexFormat;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.yamcs.utils.parser.ast.*;

@SuppressWarnings({"serial", "unused"})
public class FilterParser<T> implements FilterParserConstants {

    private static final HexFormat HEX = HexFormat.of();

    // All available fields (lowercase)
    private Set<String> fields = new HashSet<String>();

    // Fields that are part of the actual query (lowercase)
    private Set<String> queryFields = new HashSet<String>();

    // True if the query includes at least one text comparison
    private boolean includesTextSearch;

    // Resolvers by lowercase field
    private Map<String, BiFunction<T, String, String>> prefixResolvers = new HashMap<String, BiFunction<T, String, String>>();
    private Map<String, Function<T, String>> stringResolvers = new HashMap<String, Function<T, String>>();
    private Map<String, Function<T, Collection<String>>> stringCollectionResolvers = new HashMap<String, Function<T, Collection<String>>>();
    private Map<String, Function<T, Number>> numberResolvers = new HashMap<String, Function<T, Number>>();
    private Map<String, Function<T, Collection<? extends Number>>> numberCollectionResolvers = new HashMap<String, Function<T, Collection<? extends Number>>>();
    private Map<String, Function<T, Boolean>> booleanResolvers = new HashMap<String, Function<T, Boolean>>();
    private Map<String, Function<T, byte[]>> binaryResolvers = new HashMap<String, Function<T, byte[]>>();
    private Map<String, Function<T, ? extends Enum<?>>> enumResolvers = new HashMap<String, Function<T, ? extends Enum<?>>>();

    // Enum class by lowercase field
    private Map<String, Class<? extends Enum<?>>> enumClassByField = new HashMap<String, Class<? extends Enum<?>>>();

    public boolean isQueryField(String field) {
        return queryFields.contains(field.toLowerCase());
    }

    public boolean includesTextSearch() {
       return includesTextSearch;
    }

    public void addPrefixField(String field, BiFunction<T, String, String> resolver) {
        String lcField = field.toLowerCase();
        fields.add(lcField);
        prefixResolvers.put(lcField, resolver);
    }

    public void addStringField(String field, Function<T, String> resolver) {
        String lcField = field.toLowerCase();
        fields.add(lcField);
        stringResolvers.put(lcField, resolver);
    }

    public void addStringCollectionField(String field, Function<T, Collection<String>> resolver) {
        String lcField = field.toLowerCase();
        fields.add(lcField);
        stringCollectionResolvers.put(lcField, resolver);
    }

    public <E extends Enum<?>> void addEnumField(String field, Class<E> enumClass, Function<T, E> resolver) {
        String lcField = field.toLowerCase();
        fields.add(lcField);
        enumResolvers.put(lcField, resolver);
        enumClassByField.put(lcField, enumClass);
    }

    public void addNumberField(String field, Function<T, Number> resolver) {
        String lcField = field.toLowerCase();
        fields.add(lcField);
        numberResolvers.put(lcField, resolver);
    }

    public void addNumberCollectionField(String field, Function<T, Collection<? extends Number>> resolver) {
        String lcField = field.toLowerCase();
        fields.add(lcField);
        numberCollectionResolvers.put(lcField, resolver);
    }

    public void addBooleanField(String field, Function<T, Boolean> resolver) {
        String lcField = field.toLowerCase();
        fields.add(lcField);
        booleanResolvers.put(lcField, resolver);
    }

    public void addBinaryField(String field, Function<T, byte[]> resolver) {
        String lcField = field.toLowerCase();
        fields.add(lcField);
        binaryResolvers.put(lcField, resolver);
    }

    public BiFunction<T, String, String> getPrefixResolver(String field) {
        for (var entry : prefixResolvers.entrySet()) {
            if (field.startsWith(entry.getKey())) {
                return entry.getValue();
            }
        }
        return null;
    }

    public Function<T, String> getStringResolver(String field) {
        return stringResolvers.get(field);
    }

    public Function<T, Collection<String>> getStringCollectionResolver(String field) {
        return stringCollectionResolvers.get(field);
    }

    public Function<T, Number> getNumberResolver(String field) {
        return numberResolvers.get(field);
    }

    public Function<T, Collection<? extends Number>> getNumberCollectionResolver(String field) {
        return numberCollectionResolvers.get(field);
    }

    public Function<T, Boolean> getBooleanResolver(String field) {
        return booleanResolvers.get(field);
    }

    public Function<T, byte[]> getBinaryResolver(String field) {
        return binaryResolvers.get(field);
    }

    public Function<T, ? extends Enum<?>> getEnumResolver(String field) {
        return enumResolvers.get(field);
    }

    public Class<? extends Enum<?>> getEnumClass(String field) {
        return enumClassByField.get(field);
    }

    /**
     * Finds the constant for an Enum label, but case-insensitive.
     */
    public <E extends Enum<?>> E findEnum(Class<E> enumeration, String value) {
        for (E enumConstant : enumeration.getEnumConstants()) {
            if (enumConstant.name().compareToIgnoreCase(value) == 0) {
                return enumConstant;
            }
        }
        return null;
    }

  final public AndExpression parse() throws ParseException {
  AndExpression result = null;
    if (jj_2_1(2)) {
      jj_consume_token(WS);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MINUS:
    case NOT:
    case STRING:
    case QUOTED_STRING:
      result = expr();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WS:
      jj_consume_token(WS);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(0);
                                                          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public AndExpression expr() throws ParseException {
  AndExpression and;
    and = and();
    if (jj_2_2(2)) {
      jj_consume_token(WS);
    } else {
      ;
    }
                                     {if (true) return and;}
    throw new Error("Missing return statement in function");
  }

  final public AndExpression and() throws ParseException {
  OrExpression clause;
  List<OrExpression> clauses = new ArrayList<OrExpression>();
    clause = or();
                  clauses.add(clause);
    label_1:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(WS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        jj_consume_token(WS);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      clause = or();
                                                   clauses.add(clause);
    }
    {if (true) return new AndExpression(clauses);}
    throw new Error("Missing return statement in function");
  }

  final public OrExpression or() throws ParseException {
  UnaryExpression clause;
  List<UnaryExpression> clauses = new ArrayList<UnaryExpression>();
    clause = unary();
                     clauses.add(clause);
    label_2:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(WS);
      jj_consume_token(OR);
      jj_consume_token(WS);
      clause = unary();
                                                 clauses.add(clause);
    }
    {if (true) return new OrExpression(clauses);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression unary() throws ParseException {
  Comparison comparison;
  AndExpression expr;
    if (jj_2_5(3)) {
      jj_consume_token(NOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      expr = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
                                                               {if (true) return new UnaryExpression(expr, true);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WS:
          jj_consume_token(WS);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        comparison = comparison();
                                           {if (true) return new UnaryExpression(comparison, true);}
        break;
      case MINUS:
        jj_consume_token(MINUS);
        comparison = comparison();
                                      {if (true) return new UnaryExpression(comparison, true);}
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expr = expr();
        jj_consume_token(RPAREN);
                                    {if (true) return new UnaryExpression(expr, false);}
        break;
      case STRING:
      case QUOTED_STRING:
        comparison = comparison();
                              {if (true) return new UnaryExpression(comparison, false);}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Comparison comparison() throws ParseException {
  String comparable;
  Token comparableToken;
  Token comparatorToken = null;
  Comparator comparator = null;
  String value = null;
  Pattern pattern = null;
  byte[] binary = null;
    comparable = term();
    comparableToken = token;
    if (jj_2_6(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      comparator = comparator();
    comparatorToken = token;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WS:
        jj_consume_token(WS);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      value = term();
    } else {
      ;
    }
    String lcComparable = comparable.toLowerCase();
    if (comparator == null) {
        includesTextSearch = true;
    } else {
        queryFields.add(lcComparable);
        if (!fields.contains(lcComparable)) {
            boolean prefixMatch = false;
            for (String prefix : prefixResolvers.keySet()) {
                if (lcComparable.startsWith(prefix)) {
                    prefixMatch = true;
                    break;
                }
            }
            if (!prefixMatch) {
                {if (true) throw new UnknownFieldException(lcComparable, comparableToken, tokenImage);}
            }
        }

        Class<? extends Enum<?>> enumClass = enumClassByField.get(lcComparable);
        if (enumClass != null) {
            if (!value.equalsIgnoreCase("null") && findEnum(enumClass, value) == null) {
                {if (true) throw new IncorrectTypeException(value, token, tokenImage);}
            }
        }

        if (binaryResolvers.containsKey(lcComparable)) {
            if (!value.equalsIgnoreCase("null")) {
                try {
                    binary = HEX.parseHex(value);
                } catch (IllegalArgumentException e) {
                    {if (true) throw new IncorrectTypeException(value, token, tokenImage);}
                }
            }
        }

        if (comparator == Comparator.RE_EQUAL_TO || comparator == Comparator.RE_NOT_EQUAL_TO) {
            try {
                pattern = Pattern.compile(value);
            } catch (PatternSyntaxException e) {
                {if (true) throw new InvalidPatternException(value, token, tokenImage);}
            }
        }
    }

    {if (true) return new Comparison(lcComparable, comparator, value, pattern, binary);}
    throw new Error("Missing return statement in function");
  }

  final public String term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
             {if (true) return token.image;}
      break;
    case QUOTED_STRING:
      jj_consume_token(QUOTED_STRING);
    String s = token.image;
    {if (true) return s.substring(1, s.length() - 1).replace("\u005c\u005c\u005c"","\u005c"").replace("\u005c\u005c\u005c\u005c","\u005c\u005c");}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Comparator comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_TO:
      jj_consume_token(EQUAL_TO);
               {if (true) return Comparator.EQUAL_TO;}
      break;
    case NOT_EQUAL_TO:
      jj_consume_token(NOT_EQUAL_TO);
                   {if (true) return Comparator.NOT_EQUAL_TO;}
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
                {if (true) return Comparator.LESS_THAN;}
      break;
    case GREATER_THAN:
      jj_consume_token(GREATER_THAN);
                   {if (true) return Comparator.GREATER_THAN;}
      break;
    case LESS_THAN_OR_EQUAL_TO:
      jj_consume_token(LESS_THAN_OR_EQUAL_TO);
                            {if (true) return Comparator.LESS_THAN_OR_EQUAL_TO;}
      break;
    case GREATER_THAN_OR_EQUAL_TO:
      jj_consume_token(GREATER_THAN_OR_EQUAL_TO);
                               {if (true) return Comparator.GREATER_THAN_OR_EQUAL_TO;}
      break;
    case HAS:
      jj_consume_token(HAS);
          {if (true) return Comparator.HAS;}
      break;
    case RE_EQUAL_TO:
      jj_consume_token(RE_EQUAL_TO);
                  {if (true) return Comparator.RE_EQUAL_TO;}
      break;
    case RE_NOT_EQUAL_TO:
      jj_consume_token(RE_NOT_EQUAL_TO);
                      {if (true) return Comparator.RE_NOT_EQUAL_TO;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_3() {
    if (jj_scan_token(WS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_3()) jj_scanpos = xsp;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(RE_NOT_EQUAL_TO)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(RE_EQUAL_TO)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(HAS)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(GREATER_THAN_OR_EQUAL_TO)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(LESS_THAN_OR_EQUAL_TO)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(NOT_EQUAL_TO)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(EQUAL_TO)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(WS)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FilterParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc1c00,0x4,0x8,0x4,0x4,0x4,0x4,0xc1c00,0x4,0x4,0xc0000,0x1a3f0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FilterParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FilterParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FilterParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FilterParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FilterParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FilterParser(FilterParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FilterParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
